@page "/"

@using System.Text.Json
@using ToDo_Blazor_App_With_LocalStorage.Services
@using ToDo_Blazor_App_With_LocalStorage.Models

@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

@if (IsLoading)
{
    <p>Loading...</p>
}
else
{
    <TodoWrapper Items="TodoItems" OnChanged="OnTodoListStateChanged" OnFilterChanged="OnFilterChanged">
    <InputTemplate Context="TodoItemStr">
        <TodoHeader HeaderTemplateData="TodoItemStr" />
    </InputTemplate>
    <ItemTemplate Context="TodoItemCtx">
        <TodoBody TemplateData="TodoItemCtx" />
    </ItemTemplate>
    <FooterTemplate Context="TodoFooter">
        <TodoFooter FooterTemplateData="TodoFooter" />
    </FooterTemplate>
</TodoWrapper>
}

@code {
    private bool IsLoading { get; set; } = true;
    private Dictionary<Guid, TodoItem> TodoItems { get; set; } = [];
    [Inject]
    private TodoStorageService TodoStorageService { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            TodoItems = await TodoStorageService.GetTodoItemsAsync();
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    protected async void OnTodoListStateChanged(TodoItemStateChangedEventArgs e)
    {
        await TodoStorageService.SaveTodoItemAsync(TodoItems);
        await InvokeAsync(StateHasChanged);
    }

    protected async void OnFilterChanged(string filter)
    {
        TodoItems = await TodoStorageService.GetFilteredTodoItemAsync(filter);
        await InvokeAsync(StateHasChanged);
    }

}